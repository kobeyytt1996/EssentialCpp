class LessThan{
public:
    LessThan( int val ) : _val(val){}
    int comp_val() const { return _val; }
    void comp_val( int nval ){ _val = nval; }
    
    bool operator()( int value ) const;
    
private:
    int _val;
};

inline bool LessThan::
operator()( int value ) const { return value < _val };

int count_less_than( const vector<int> &vec, int comp)
{
    LessThan lt(comp);
    
    int count = 0;
    for (int ix = 0; ix < vec.size(); ++ix)
    if (lt(vec[ix]))
        ++count;
    
    return count;
}

void print_less_than( const vector<int> &vec, int comp, ostream &os = cout)
{
    LessThan lt(comp);
    
    vector::iterator iter = vec.begin(),
                     end_it = vec.end();
    while ((iter = find_if(iter, end_it, lt)) != end_it)
    {
        os << *iter << " ";
        ++iter;
    }
}
