#include <map>
#include <set>
#include <string>
#include <iostream>
#include <fstream>
using namespace std;

void ini_exclusion_set(set<string>&);
void process_file(map<string,int>&, const set<string>&, ifstream&);
void user_query(const map<string,int>&);
void display_word_count(const map<string,int>&, ofstream&);
int main()
{
ifstream ifile("input.txt");
ofstream ofile("output.txt");
if (! ifile || ! ofile){
cerr << "Unable to open file -- bailing out!\n";
return -1;
}
set<string> exclude_set;
ini_exclusion_set(exclude_set);
map<string,int> word_count;
process_file(word_count, exclude_set, ifile);
user_query(word_count);
display_word_count(word_count, ofile);
}

void ini_exclusion_set(set<string> &exs){
static string _excluded_words[25] = {
"the","and","but","that","then","are","been",
"can","a","could","did","for", "of",
"had","have","him","his","her","its","is",
"were","which","when","with","would"
};
exs.insert(_excluded_words, _excluded_words+25);
}

void process_file(map<string,int> &word_count,
const set<string> &exclude_set, ifstream &ifile)
{
string word;
while (ifile >> word)
{
if (exclude_set.count(word))
continue;
word_count[word]++;
}
}

void user_query(const map<string,int> &word_map)
{
    string search_word;

    cout << "Enter a word: q to quit\n";
    cin >> search_word;

    while (search_word != "q" && search_word.size())
    {
        map<string,int>::const_iterator it;
        if ((it = word_map.find(search_word))
!= word_map.end())
            cout << "Found " << search_word
            << " occurs " << it->second
            <<" times\n";
        else
            cout << "Unable to find.\n";
        cout << "Again: q to quit\n";
        cin >> search_word;
    }
}

void display_word_count(const map<string,int> &word_map, ofstream &os)
{
    map<string,int>::const_iterator iter = word_map.begin();

    for ( ; iter != word_map.end(); ++iter)
        os << iter->first <<"("
        << iter->second << ")" << endl;
    os << endl;
}

