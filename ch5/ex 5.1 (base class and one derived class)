#include <string>
#include <vector>
#include <iostream>
using namespace std;

typedef string elemType;

class Stack{
public:
    virtual ~Stack(){}
    virtual bool pop(elemType&) = 0;
    virtual bool push(const elemType&) = 0;
    virtual bool peek(int index, elemType&) = 0;
    
    virtual bool empty() const = 0;
    virtual bool full() const = 0;
    virtual int size() const = 0;
    
    virtual int top() const = 0;
    virtual void print(ostream& = cout) const = 0;
};

ostream& operator<<(ostream &os, const Stack &rhs)
    {rhs.print(); return os;}

class LIFO_Stack : public Stack
{
public:
    LIFO_Stack(int capacity = 0) : _top(0)
        { if (capacity) _stack.reserve(capacity); }
    int size() const { return _stack.size(); }
    bool empty() const { return !_top }
    bool full() const { return size() >= _stack.max_size(); }   
    int top() const { return _top; }
    void print(ostream& = cout) const;
    
    bool pop(elemType&);
    bool push(const elemType&);
    bool peek(int index, elemType&){ return false; };
private:
    vector<elemType> _stack;
    int _top;
};

bool LIFO_Stack::pop(elemType &elem)
{
    if (empty()) return false;
    elem = _stack[--_top];
    _stack.pop_back();
    return true;
}

bool LIFO_Stack::push(elemType &elem)
{
    if (full()) return false;
    ++_top;
    _stack.push_back(elem);
    return true;
}

void LIFO_Stack::print(ostream &os = cout) const
{
    vector<elemType>::const_reverse_iterator
        rit = _stack.rbegin(),
        rend = _stack.rend();
    os << "\n\t";
    while (rit != rend)
        os << *rit++ << "\n\t";
    os << endl;
}
